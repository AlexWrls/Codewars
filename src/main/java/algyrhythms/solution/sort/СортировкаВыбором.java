package algyrhythms.solution.sort;

import org.junit.Assert;
import org.junit.Test;

/**
 * Сортировка выбором
 * <p>
 * Это простой и интуитивно понятный алгоритм сортировки.
 * Он неоднократно находит самый маленький (или самый большой) элемент из неотсортированной части массива и заменяет
 * его первым неотсортированным элементом.
 * <p>
 * Алгоритм:
 * 1. Начинаем с того, что весь входной массив считается неотсортированным.
 * 2. Перебираем неотсортированную часть массива, чтобы найти минимальный (или максимальный) элемент.
 * 3. Как только минимальный (или максимальный) элемент определен, он заменяется первым элементом в несортированной части.
 * 4. Продолжаем этот процесс, уменьшая размер неотсортированной части на один элемент на каждой итерации, пока весь
 * массив не будет отсортирован.
 * <p>
 * Сложность алгоритма:
 * В лучшем случаи:  O(n^2)
 * В cреднем: O(n^2)
 * В худшем: O(n^2)
 */
public class СортировкаВыбором {

    @Test
    public void test() {
        int[] arr = new int[]{10, 5, 2, 4, 1, 3, 8, 7, 9, 6};
        Assert.assertArrayEquals(sort(arr), new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    }

    public static int[] sort(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] > arr[j]) {
                   int tmp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = tmp;
                }
            }
        }
        return arr;
    }

}
